import streamlit as st
import pandas as pd
import plotly.express as px

@st.cache_data
def load_data():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel-—Ñ–∞–π–ª–∞ 'parsed_data.xlsx',
    –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç–æ–ª–±–µ—Ü 'publish_date' –≤ —Ñ–æ—Ä–º–∞—Ç datetime
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç DataFrame.
    """
    df = pd.read_excel('/home/polina/Dashboard/parsed_data_new_balanced.xlsx')
    df.rename(columns={'publish_date': '–î–∞—Ç–∞', 'category': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', 'type': '–¢–∏–ø_–Ω–æ–≤–æ—Å—Ç–∏'}, inplace=True)
    df['–î–∞—Ç–∞'] = pd.to_datetime(df['–î–∞—Ç–∞'], errors='coerce')
    return df


df = load_data()

if st.button("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
    df = load_data()
    st.write("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")

with st.spinner('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...'):
    df = load_data()


has_types = '–¢–∏–ø_–Ω–æ–≤–æ—Å—Ç–∏' in df.columns
has_titles = '–ó–∞–≥–æ–ª–æ–≤–æ–∫' in df.columns


st.markdown("# üì∞ Dashboard: –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π")
st.markdown("---")


total_news = len(df)
unique_categories = df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].nunique()
unique_types = df['–¢–∏–ø_–Ω–æ–≤–æ—Å—Ç–∏'].nunique() if has_types else 0

col1, col2, col3 = st.columns(3)
col1.metric("–í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π", f"{total_news}")
col2.metric("–ö–∞—Ç–µ–≥–æ—Ä–∏–π", f"{unique_categories}")
col3.metric("–¢–∏–ø–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π", f"{unique_types}")
st.markdown("---")


tab1, tab2, tab3 = st.tabs(["üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "üóÇ –ù–æ–≤–æ—Å—Ç–∏", "üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä"])

with tab1:
    st.subheader("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é")
    st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
    chart_option = st.sidebar.selectbox(
        "–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞:",
        [
            "üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
            "üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏",
            "ü•ß –ü–æ —Ç–∏–ø—É –Ω–æ–≤–æ—Å—Ç–∏",
            "üì¶ –¢–∏–ø—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
        ]
    )
    if st.sidebar.button("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫"):
        with st.spinner('–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞...'):
            if chart_option == "üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º":
                data = df.groupby('–ö–∞—Ç–µ–≥–æ—Ä–∏—è').size().reset_index(name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
                fig = px.bar(
                    data,
                    x='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
                    y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                    title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º',
                    labels={'–ö–∞—Ç–µ–≥–æ—Ä–∏—è':'–ö–∞—Ç–µ–≥–æ—Ä–∏—è','–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ':'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'}
                )
                st.plotly_chart(fig, use_container_width=True)
            elif chart_option == "üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏":
                fig = px.histogram(
                    df,
                    x='–î–∞—Ç–∞',
                    nbins=30,
                    title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏',
                    labels={'–î–∞—Ç–∞':'–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏','count':'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'}
                )
                st.plotly_chart(fig, use_container_width=True)
            elif chart_option == "ü•ß –ü–æ —Ç–∏–ø—É –Ω–æ–≤–æ—Å—Ç–∏":
                if has_types:
                    data = df.groupby('–¢–∏–ø_–Ω–æ–≤–æ—Å—Ç–∏').size().reset_index(name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
                    fig = px.pie(
                        data,
                        names='–¢–∏–ø_–Ω–æ–≤–æ—Å—Ç–∏',
                        values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                        title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø—É –Ω–æ–≤–æ—Å—Ç–∏'
                    )
                    st.plotly_chart(fig, use_container_width=True)
                else:
                    st.warning("–°—Ç–æ–ª–±–µ—Ü '–¢–∏–ø_–Ω–æ–≤–æ—Å—Ç–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            elif chart_option == "üì¶ –¢–∏–ø—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º":
                if has_types:
                    data = df.groupby(['–ö–∞—Ç–µ–≥–æ—Ä–∏—è','–¢–∏–ø_–Ω–æ–≤–æ—Å—Ç–∏']).size().reset_index(name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
                    fig = px.bar(
                        data,
                        x='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
                        y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                        color='–¢–∏–ø_–Ω–æ–≤–æ—Å—Ç–∏',
                        barmode='stack',
                        title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º'
                    )
                    st.plotly_chart(fig, use_container_width=True)
                else:
                    st.warning("–°—Ç–æ–ª–±–µ—Ü '–¢–∏–ø_–Ω–æ–≤–æ—Å—Ç–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        st.info("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫'.")

with tab2:
    st.subheader("–ù–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ–º–µ")
    topics = df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].unique().tolist()
    selected_topic = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", topics)
    filtered = df[df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] == selected_topic]
    st.write(f"–í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {selected_topic}: {len(filtered)}")
    columns_to_show = ['project', '–¢–∏–ø_–Ω–æ–≤–æ—Å—Ç–∏', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–î–∞—Ç–∞']
    available_cols = [col for col in columns_to_show if col in filtered.columns]
    if available_cols:
        st.dataframe(filtered[available_cols], use_container_width=True)
    else:
        st.info("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: project, –¢–∏–ø_–Ω–æ–≤–æ—Å—Ç–∏, –ö–∞—Ç–µ–≥–æ—Ä–∏—è, –î–∞—Ç–∞.")

    if not filtered.empty and '–î–∞—Ç–∞' in filtered.columns:
        time_series = (
            filtered.set_index('–î–∞—Ç–∞')
            .resample('D')
            .size()
            .reset_index(name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        )
        time_series['–î–∞—Ç–∞'] = time_series['–î–∞—Ç–∞'].dt.date
        fig_ts = px.line(
            time_series,
            x='–î–∞—Ç–∞',
            y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
            title=f"–î–∏–Ω–∞–º–∏–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –¥–∞—Ç–∞–º –¥–ª—è —Ç–µ–º—ã '{selected_topic}'",
            labels={'–î–∞—Ç–∞':'–î–∞—Ç–∞','–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ':'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'}
        )
        st.plotly_chart(fig_ts, use_container_width=True)
    else:
        st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–Ω–∞–º–∏–∫–∏.")


with tab3:
    st.subheader("üîç –î–µ—Ç–∞–ª—å–Ω–∞—è")


    category = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:", df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].unique())
    df_cat = df[df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] == category].copy()


    if '–¢–∏–ø_–Ω–æ–≤–æ—Å—Ç–∏' in df_cat.columns:
        type_sel = st.selectbox("–¢–∏–ø –Ω–æ–≤–æ—Å—Ç–∏:", df_cat['–¢–∏–ø_–Ω–æ–≤–æ—Å—Ç–∏'].unique())
        df_type = df_cat[df_cat['–¢–∏–ø_–Ω–æ–≤–æ—Å—Ç–∏'] == type_sel]
    else:
        df_type = df_cat


    df_type['–î–∞—Ç–∞'] = pd.to_datetime(df_type['–î–∞—Ç–∞'], errors='coerce')
    df_type['_date'] = df_type['–î–∞—Ç–∞'].dt.date
    dates = sorted(df_type['_date'].dropna().unique())
    date_options = ['–ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞'] + dates
    date_sel = st.selectbox("–î–∞—Ç–∞:", date_options)
    if date_sel != '–ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞':
        df_date = df_type[df_type['_date'] == date_sel]
    else:
        df_date = df_type

    st.markdown("---")
    st.subheader("–°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ñ–∏–ª—å—Ç—Ä—É")

    if df_date.empty:
        st.info("–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º")
    else:
        titles_df = (
            df_date[['title']]
            .rename(columns={'title': '–ó–∞–≥–æ–ª–æ–≤–æ–∫'})
            .reset_index(drop=True)
        )
        st.table(titles_df)


        for _, row in df_date.iterrows():
            with st.expander(row['title']):
                body = row.get('body') or row.get('text', '')
                if body:
                    st.write(body)
                url = row.get('fronturl') or row.get('–°—Å—ã–ª–∫–∞', '')
                if url:
                    st.markdown(f"[–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–æ–≤–æ—Å—Ç–∏]({url})")


from pyngrok import ngrok

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º authtoken (–µ—Å–ª–∏ –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
ngrok.set_auth_token("2vY5DadOeazDA9BiiEa1fRNCbaB_66eenrbPgFVRuiEHAnMK7")

# –£–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ä—Ç –¥–ª—è Streamlit (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 8501)
port = 8501

# –°–æ–∑–¥–∞–µ–º —Ç—É–Ω–Ω–µ–ª—å —á–µ—Ä–µ–∑ ngrok
from pyngrok import ngrok, exception

try:
    public_url = ngrok.connect(port, region="eu")  
    print("Streamlit –ø—É–±–ª–∏—á–Ω—ã–π URL:", public_url)
except exception.PyngrokNgrokError as e:
    print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å ngrok:", e)



# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Streamlit
#—Å—Å—ã–ª–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞ streamlit run /home/polina/Dashboard/app_streamlit.py [ARGUMENTS]